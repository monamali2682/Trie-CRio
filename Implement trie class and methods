Implement the Trie class:
Trie() Initializes the trie object.
void insert(String word) Inserts the string word into the trie.
boolean search(String word) Returns true if the string word is in the trie (i.e., was inserted before), and false otherwise.
boolean startsWith(String prefix) Returns true if there is a previously inserted string word that has the prefix prefix, and false otherwise.

class TrieNode{
    boolean isEnd=false;
    TrieNode[] children = new TrieNode[26];
    TrieNode(){
        
    }
}
class Trie {
    TrieNode root;
    public Trie() {
        root= new TrieNode();
    }
    
    public void insert(String word) {
      TrieNode curr = root;
      for(int i=0;i<word.length();i++){
          char c= word.charAt(i);
          if(curr.children[c-'a']==null){
              curr.children[c-'a']= new TrieNode();
          }
          curr= curr.children[c-'a'];
      }
      curr.isEnd = true;
    }
    
    public boolean search(String word) {
        TrieNode curr= root;
        for(int i=0;i<word.length();i++){
          char c= word.charAt(i);
          if(curr.children[c-'a']==null){
              return false;
          }
          curr= curr.children[c-'a'];
        }
        return curr.isEnd;     
    }
    
    public boolean startsWith(String prefix) {
        TrieNode curr= root;
        for(int i=0;i<prefix.length();i++){
          char c= prefix.charAt(i);
          if(curr.children[c-'a']==null){
              return false;
          }
          curr= curr.children[c-'a'];
        }
        return true; 
    }
}
